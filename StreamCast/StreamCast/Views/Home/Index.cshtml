<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Screen, Camera & Audio Broadcast</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h2>Broadcast Screen, Camera & Audio</h2>
        <button id="startScreen">Start Screen Broadcast</button>
        <button id="startCamera">Start Camera Broadcast</button>
        <button id="startAudio">Start Audio Broadcast</button>

        <select id="cameraSelect" class="form-select mt-3"></select>
        <select id="audioSelect" class="form-select mt-3"></select> <!-- Dropdown for audio devices -->

        <video id="preview" autoplay playsinline controls></video>

        <!-- IIS Server IP Display -->
        <input type="text" id="serverAddress" placeholder="IIS Server IP Display" readonly />
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const serverAddress = '@ViewBag.ServerAddress';
            document.getElementById("serverAddress").value = serverAddress;

            const videoElement = document.getElementById('preview');
            const cameraSelect = document.getElementById('cameraSelect');
            const audioSelect = document.getElementById('audioSelect');
            let webSocket;
            let currentStream;
            let mediaRecorder;

            // Function to populate camera and audio dropdowns
            async function populateDeviceOptions() {
                const devices = await navigator.mediaDevices.enumerateDevices();

                // Populate video devices
                const videoDevices = devices.filter(device => device.kind === 'videoinput');
                cameraSelect.innerHTML = '';
                videoDevices.forEach((device, index) => {
                    const option = document.createElement('option');
                    option.value = device.deviceId;
                    option.text = device.label || `Camera ${index + 1}`;
                    cameraSelect.appendChild(option);
                });

                // Populate audio devices
                const audioDevices = devices.filter(device => device.kind === 'audioinput');
                audioSelect.innerHTML = '';
                audioDevices.forEach((device, index) => {
                    const option = document.createElement('option');
                    option.value = device.deviceId;
                    option.text = device.label || `Microphone ${index + 1}`;
                    audioSelect.appendChild(option);
                });
            }

            // Function to start broadcast
            async function startBroadcast(mediaType) {
                try {
                    console.log(`Requesting ${mediaType} stream...`);

                    if (mediaType === 'screen') {
                        currentStream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });
                    } else if (mediaType === 'camera') {
                        const deviceId = cameraSelect.value;
                        currentStream = await navigator.mediaDevices.getUserMedia({
                            video: { deviceId: { exact: deviceId } },
                            audio: true
                        });
                    } else if (mediaType === 'audio') {
                        const audioDeviceId = audioSelect.value;
                        console.log("audioDeviceId>> " + audioDeviceId);
                        currentStream = await navigator.mediaDevices.getUserMedia({
                            audio: { deviceId: { exact: audioDeviceId } }
                        });
                    }

                    videoElement.srcObject = currentStream;

                    // Initialize WebSocket if not already open
                    if (!webSocket || webSocket.readyState !== WebSocket.OPEN) {
                        webSocket = new WebSocket(`wss://${serverAddress}/ws`);
                        webSocket.onopen = function () {
                            console.log("WebSocket connection opened.");
                            startMediaRecorder(currentStream);
                        };
                    } else {
                        startMediaRecorder(currentStream); // Start recorder if WebSocket is open
                    }

                    webSocket.onclose = function () {
                        console.log("WebSocket connection closed.");
                    };

                    webSocket.onerror = function (error) {
                        console.error("WebSocket error observed:", error);
                    };

                    console.log(`${mediaType} stream obtained.`);
                } catch (error) {
                    console.error(`Error obtaining ${mediaType} stream:`, error);
                }
            }

            // Function to start MediaRecorder with currentStream
            function startMediaRecorder(mediaStream) {
                // Stop any previous recorder before starting a new one
                if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                    console.log("mediaRecorder inactive");
                    mediaRecorder.stop();
                }

                mediaRecorder = new MediaRecorder(mediaStream, { mimeType: 'video/webm; codecs=vp8' });
                mediaRecorder.ondataavailable = function (event) {
                    if (event.data.size > 0 && webSocket.readyState === WebSocket.OPEN) {
                        webSocket.send(event.data); // Send data over WebSocket
                    }
                };

                mediaRecorder.start(100); // Record in 1-second chunks
                console.log("MediaRecorder started.");
            }

            // Start broadcast buttons
            document.getElementById('startScreen').onclick = () => startBroadcast('screen');
            document.getElementById('startCamera').onclick = () => startBroadcast('camera');
            document.getElementById('startAudio').onclick = () => startBroadcast('audio');

            // Change camera without stopping WebSocket
            cameraSelect.onchange = async function () {
                if (currentStream) {
                    const deviceId = cameraSelect.value;
                    const newStream = await navigator.mediaDevices.getUserMedia({
                        video: { deviceId: { exact: deviceId } },
                        audio: true
                    });

                    // Replace the video track in the currentStream
                    const newVideoTrack = newStream.getVideoTracks()[0];
                    const oldVideoTrack = currentStream.getVideoTracks()[0];
                    currentStream.removeTrack(oldVideoTrack);
                    currentStream.addTrack(newVideoTrack);
                    videoElement.srcObject = currentStream;

                    // Restart MediaRecorder to capture new track
                    startMediaRecorder(currentStream);

                    // Stop the old track to release resources
                    oldVideoTrack.stop();
                    console.log("Camera switched at runtime.");
                }
            };

            // Populate camera and audio options on load
            await populateDeviceOptions();
        });
    </script>
</body>
</html>
